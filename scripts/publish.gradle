//

apply plugin: "maven-publish"
apply plugin: "signing"
signing {
  sign configurations.archives
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom.withXml {
        asNode().children().last() + {
          resolveStrategy = Closure.DELEGATE_FIRST

          name "MicroType"
          description "Make type alias almost possible in Java"
          url "https://github.com/rafasf/microtype"

          licenses {
            license {
              name "MIT License"
              url "https://opensource.org/licenses/MIT"
              distribution "repo"
            }
          }

          scm {
            url "https://github.com/rafasf/microtype"
            connection "scm:git:git://github.com/rafasf/microtype.git"
            developerConnection "scm:git:ssh://git@github.com:rafasf/microtype.git"
          }

          developers {
            developer {
              name "Rafael Ferreira"
            }
          }
        }
      }

      pom.withXml {
        def pomFile = file("${project.buildDir}/generated-pom.xml")
        writeTo(pomFile)
        def pomAscFile = signing.sign(pomFile).signatureFiles[0]
        artifact(pomAscFile) {
          classifier = null
          extension = "pom.asc"
        }
      }

      from components.java

      artifact(sourceJar) {
        classifier = "sources"
      }
      artifact(javadocJar) {
        classifier = "javadoc"
      }

      project.tasks.signArchives.signatureFiles.each {
        artifact(it) {
          def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
          if (matcher.find()) {
            classifier = matcher.group(1)
          } else {
            classifier = null
          }
          extension = 'jar.asc'
        }
      }
      repositories {
        maven {
          url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
          credentials {
            username project.property("ossreleases_username")
            password project.property("ossreleases_password")
          }
        }
      }
    }
  }
}

model {
  tasks.generatePomFileForMavenJavaPublication {
    destination = file("$buildDir/generated-pom.xml")
  }
  tasks.publishMavenJavaPublicationToMavenLocal {
    dependsOn project.tasks.signArchives
  }
  tasks.publishMavenJavaPublicationToMavenRepository {
    dependsOn project.tasks.signArchives
  }
}
